{"version":3,"sources":["../src/component/hooks/reactived.ts"],"names":[],"mappings":"","file":"../../../component/hooks/reactived.js","sourcesContent":["import { Ref, UnwrapRef, ComputedRef } from 'vue';\n\nexport declare type ToRectiveds<T = any> = {\n    [K in keyof T]: T[K] extends Ref ? T[K] : (Ref<UnwrapRef<T[K]>> | ComputedRef<T[K]> | Readonly<Ref<T[K]>>);\n};\n\nexport interface Reactived<T = any> {\n    onReactived?: () => void;\n    reactived?: (data: ToRectiveds<T>) => ToRectiveds<T> | void;\n    didReactived?: (proxy: ToRectiveds<T>) => ToRectiveds<T> | void;\n}\n"]}