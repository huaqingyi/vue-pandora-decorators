{"version":3,"sources":["../src/vuex/composition.ts"],"names":[],"mappings":";;;AACA,+BAAgC;AAChC,6BAA4C;AAC5C,mCAA6B;AAQ7B,SAAgB,QAAQ,CAAC,MAAmC,EAAE,UAAiB;IAC3E,MAAM,KAAK,GAAG,eAAQ,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IAC1C,OAAO,IAAI,KAAK,CAAC,KAAK,EAAE;QACpB,GAAG,CAAC,MAAM,EAAE,GAAG;YACX,IAAI,UAAU,EAAE;gBACZ,OAAO,cAAQ,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;aACtC;iBAAM;gBACH,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;aACtB;QACL,CAAC;KACJ,CAAC,CAAC;AACP,CAAC;AAXD,4BAWC;AAED,SAAgB,SAAS,CAAI,MAA0B;IACnD,MAAM,KAAK,GAAG,eAAQ,EAAE,CAAC;IACzB,OAAO,IAAI,KAAK,CAAM,EAAE,EAAE;QACtB,GAAG,CAAC,MAAM,EAAE,GAAQ;YAChB,IAAI,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;gBACvC,OAAO,CAAC,GAAG,KAAU,EAAE,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,GAAG,KAAK,CAAC,CAAC;aAC9F;YACD,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;QACvB,CAAC;KACJ,CAAC,CAAA;AACN,CAAC;AAVD,8BAUC;AAED,SAAgB,UAAU,CAAI,MAA0B;IACpD,MAAM,KAAK,GAAG,eAAQ,EAAE,CAAC;IACzB,MAAM,OAAO,GAAQ,EAAE,CAAC;IACxB,YAAG,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,EAAE;QAC1B,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,KAAU,EAAE,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,GAAG,KAAK,CAAC,CAAA;IAClG,CAAC,CAAC,CAAC;IACH,OAAO,OAAO,CAAC;AACnB,CAAC;AAPD,gCAOC","file":"../../vuex/composition.js","sourcesContent":["import { VuexModule, VuexModuleClass } from './model';\nimport { useStore } from 'vuex';\nimport { computed, ComputedRef } from 'vue';\nimport { map } from 'lodash';\n\ntype ComputedReadonly<T> = {\n    readonly [P in keyof T]: ComputedRef<T[P]>;\n};\n\nexport function useState<State>(module: VuexModuleClass<VuexModule>): State;\nexport function useState<State>(module: VuexModuleClass<VuexModule>, toComputed: true): ComputedReadonly<State>;\nexport function useState(module: VuexModuleClass<VuexModule>, toComputed?: true) {\n    const state = useStore().state[module.id];\n    return new Proxy(state, {\n        get(target, key) {\n            if (toComputed) {\n                return computed(() => target[key]);\n            } else {\n                return target[key];\n            }\n        }\n    });\n}\n\nexport function useAction<M>(module: VuexModuleClass<M>): M {\n    const store = useStore();\n    return new Proxy<any>({}, {\n        get(target, key: any) {\n            if (module.actions && module.actions[key]) {\n                return (...props: any) => store.dispatch(module.action((module) => module[key]), ...props);\n            }\n            return target[key];\n        }\n    })\n}\n\nexport function useActions<M>(module: VuexModuleClass<M>): M {\n    const store = useStore();\n    const actions: any = {};\n    map(module.actions, (_f, n) => {\n        actions[n] = (...props: any) => store.dispatch(module.action((module) => module[n]), ...props)\n    });\n    return actions;\n}\n"]}